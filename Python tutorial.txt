Variable name

(A-Z, a-z, 0-9, _ )
----------------------------------

printing variables
print(x, y)

printing string variables
print(x+y)  or print(x,y)
---------------------------------

global variable

global ->to create global variable inside function use global keyword.
-------------------------------------

Data Types

Text Type:	str
Numeric Types:	int, float, complex
Sequence Types:	list, tuple, range
Mapping Type:	dict
Set Types:	set, frozenset
Boolean Type:	bool
Binary Types:	bytes, bytearray, memoryview
None Type:	NoneType
-----------------------------------
type(varname) -> get data type of variable
---------------------------------
Example	Data Type

x = "Hello World"				str	
x = 20						int	
x = 20.5					float		
x = 1j						complex	
x = ["apple", "banana", "cherry"]		list	
x = ("apple", "banana", "cherry")		tuple	
x = range(6)					range		
x = {"name" : "John", "age" : 36}		dict	
x = {"apple", "banana", "cherry"}		set	
x = frozenset({"apple", "banana", "cherry"})	frozenset	
x = True					bool	
x = b"Hello"					bytes	
x = bytearray(5)				bytearray	
x = memoryview(bytes(5))			memoryview	
x = None					NoneType
----------------------------------

Setting the Specific Data Type
using constructor

x = str("Hello World")				str	
x = int(20)					int	
x = float(20.5)					float	
x = complex(1j)					complex	
x = list(("apple", "banana", "cherry"))		list	
x = tuple(("apple", "banana", "cherry"))	tuple	
x = range(6)					range	
x = dict(name="John", age=36)			dict	
x = set(("apple", "banana", "cherry"))		set	
x = frozenset(("apple", "banana", "cherry"))	frozenset	
x = bool(5)					bool	
x = bytes(5)					bytes	
x = bytearray(5)				bytearray	
x = memoryview(bytes(5))			memoryview
----------------------------

Random Number

random ->built-in module 

random.randrange(a,b) -> a include, b exclude

import random
print(random.randrange(1,10)
----------------------------------

Modifier
decimal point upto 2 places
price= 59.2345
text= f"price is {price:.2f} rupees."

-----------------------------------

type Casting

int(), float(), str()
---------------------------------

String

use-> '' or ""

1) Quotes inside Quotes-> " ' ' " or ' "" '

2) Multiline String-> """    """ or '''  '''

3) Strings are Arrays
a="Hello"
print(a[1])

4) looping 
for ch in "banana":
   print(ch)

5) len(str) -> string length

6) check for substring
text="Vikram"
print("kra" in text) //True

7) Slicing
b="Hello, World!"
print(b[2:5]  #llo (5 not include )
print(b[:5]	#Hello  Slice from s tart
print(b[2:]	#llo, World! slice to the end
print(b[-5:-2]	#orl (5 included, 2 excluded)

8) Upper Case
b.upper()

9) Lower case
b.lower()

10) remove starting and ending white spaces
b.strip()

11) replace String
b.replace(oldStr, newStr)

12) Split string 
b.split(",")   # return list

13) concatenation
str3= str1+str2

14) We cannot combine strings and numbers using + operator
age=12
txt="viki" + age 	#error

15) F-String

{}-> placeholder can contains variables,math  operations, functions , modifiers

age=12
txt=f"My age is {age}"
print(txt)

16) Escape Character
backslash \ followed by the character you want to insert
txt= "My favorite food is \"Cake\"".
-----------------------------------------------------------

String methods

Note: All string methods return new values. They do not change the original string.

Method		Description
capitalize()	Converts the first character to upper case
casefold()	Converts string into lower case
center()	Returns a centered string
count()		Returns the number of times a specified value occurs in a string
encode()	Returns an encoded version of the string
endswith()	Returns true if the string ends with the specified value
expandtabs()	Sets the tab size of the string
find()		Searches the string for a specified value and returns the position of where it was found
format()	Formats specified values in a string
format_map()	Formats specified values in a string
index()		Searches the string for a specified value and returns the position of where it was found
isalnum()	Returns True if all characters in the string are alphanumeric
isalpha()	Returns True if all characters in the string are in the alphabet
isascii()	Returns True if all characters in the string are ascii characters
isdecimal()	Returns True if all characters in the string are decimals
isdigit()	Returns True if all characters in the string are digits
isidentifier()	Returns True if the string is an identifier
islower()	Returns True if all characters in the string are lower case
isnumeric()	Returns True if all characters in the string are numeric
isprintable()	Returns True if all characters in the string are printable
isspace()	Returns True if all characters in the string are whitespaces
istitle()	Returns True if the string follows the rules of a title
isupper()	Returns True if all characters in the string are upper case
join()		Joins the elements of an iterable to the end of the string
ljust()		Returns a left justified version of the string
lower()		Converts a string into lower case
lstrip()	Returns a left trim version of the string
maketrans()	Returns a translation table to be used in translations
partition()	Returns a tuple where the string is parted into three parts
replace()	Returns a string where a specified value is replaced with a specified value
rfind()		Searches the string for a specified value and returns the last position of where it was found
rindex()	Searches the string for a specified value and returns the last position of where it was found
rjust()		Returns a right justified version of the string
rpartition()	Returns a tuple where the string is parted into three parts
rsplit()	Splits the string at the specified separator, and returns a list
rstrip()	Returns a right trim version of the string
split()		Splits the string at the specified separator, and returns a list
splitlines()	Splits the string at line breaks and returns a list
startswith()	Returns true if the string starts with the specified value
strip()		Returns a trimmed version of the string
swapcase()	Swaps cases, lower case becomes upper case and vice versa
title()		Converts the first character of each word to upper case
translate()	Returns a translated string
upper()		Converts a string into upper case
zfill()		Fills the string with a specified number of 0 values at the beginning
---------------------------------------------------------------------------------------------

Boolean

1) True or False

2) bool()   -> evaluate any values-> True or False
Almost any value is evaluated to True if it has some sort of content.

Any string is True, except empty strings.

Any number is True, except 0.

None is False

Any list, tuple, set, and dictionary are True, except empty ones.

ex. bool('viki') #True
-------------------------------------------------------

Operators

1) Arithmetic Operators
+,-,*,/,%, ** (exponentiation), // (floor division)

2) Assignment Operators
=, +=, -=, *=, /=, %=, //=, **=, &=, |=, ^=, >>=, <<=, .=

:= 
example- print(x:=3)  
same as 
x=3
print(x)

3) Comparison Operators
==,!=, >, <, >=, <=

4) Logical Operators
and, or, not

5) Identity Operators
   i) is ->		Returns True if both variables are the same object ->		x is y
   ii) is not->		Returns True if both variables are not the same object->	x is not y	


6) Membership Operators

Membership operators are used to test if a sequence is presented in an object

   i)in ->	Returns True if a sequence with the specified value is present in the object ->   x in y
   ii)not in -> Returns True if a sequence with the specified value is not present in the object -> x not in y

   ex. x = ["apple", "banana"]
       print("banana" in x)	#True


7) Bitwise Operators

&,|,^,~,,<<,>>
-------------------------------------------

*****************************************************************************************

Collections

There are four collection data types in the Python programming language:

1) List ->is a collection which is ordered and changeable. Allows duplicate members.

2) Tuple -> is a collection which is ordered and unchangeable. Allows duplicate members.

3)Set -> is a collection which is unordered, unchangeable*, and unindexed. No duplicate members.
4) Dictionary -> is a collection which is ordered** and changeable. No duplicate members.

*Set items are unchangeable, but you can remove and/or add items whenever you like.
---------------------------------------------------------------------------------

Lists
********************************************

Lists are used to store multiple items in a single variable.

List items are ordered, changeable, and allow duplicate values.

List items can be of any data type.

lists are defined as objects with the data type 'list'

A list can contain different data types.

ex.
mylist = ["apple", "banana", 2, 3.66, True]

1) len()
   print(len(mylist))

2) type(mylist) ->  <class 'list'>

3) list() constructor
mylist=list(("apple", "banana", "cherry"))

---------------------------------------------------------
Access list items
1) using index -> first item has index 0
mylist[0]

2)negative indexing -> -1 refers to last item
mylist[-1]

3) Range of indexes
mylist[2:5] -> 2 include, 5 exclude

4) Range of negative indexes
mylist[-4:-1]  -> -4(included) to -1(excluded)
-------------------------------------------------------

Change List Items

1) change one specific item: using index
mylist[1]="Chiku"

2) change Range of Items
mylist[1:3]=["kiwi", "mango"]

3)If you insert more items than you replace, the new items will be inserted where you specified, and the remaining items will move accordingly
mylist[1:3]= ["kiwi", "mango", 3, 44]

4) If you insert less items than you replace, the new items will be inserted where you specified, and the remaining items will removed from list.
thislist = ["apple", "banana", "cherry"]
thislist[1:3] = ["watermelon"]
print(thislist) #['apple', 'watermelon']
----------------------------------------------------

Add Items

1) append() -> add an item to the end of the list
mylist.append("orange")

2)insert() -> insert an item at specified index
mylist.insert(2,"viki")

3) extend() -> to append ele from another list -> ele will be added to the end of the list
mylist.extend(newList)

4) add any iterable
The extend() method does not have to append lists, you can add any iterable object (tuples, sets, dictionaries etc.).
mylist.extend(thisTuple)
--------------------------------------------------------

Remove Items

1) remove() -> removes specified item
If there are more than one item with the specified value, the remove() method removes the first occurrence
mylist.remove("banana")

2) pop() -> removes specified index
mylist.pop(1)
mylist.pop() -> removes the last item

3) del -> del keyword removes the specified index
del mylist[0]

The del keyword can also delete the list completely.
del mylist

4) clear() -> empties the list.
mylist.clear()
-----------------------------------------------------------------------------------------------

loop lists

1) for loop
for x in mylist:
  print(x)

2) for loop through index
for i in range(len(mylist)):
  print(mylist[i])

3) while loop
i=0
while i<len(mylist):
  print(mylist[i])
  i+=1

4) List Comprehension
newList = [expression for item in iterable if condition ==True]

[print(x) for x in mylist]

new list containing items with the letter "a"
newlist = [x for x in fruits if "a" in x]
------------------------------------------------

Sort List

1) sort() -> alphanumerically, ascending by default
mylist.sort()

2) sort descending
mylist.sort(reverse=True)

3) Customize Sort Function
mylist.sort(key=myfunc)
--------------------------------------------

reverse order

mylist.reverse()
------------------------------------------------------------

Copy a List

1) copy()
copyList=mylist.copy()

2) list()
copyList=list(mylist)

3) slice operator
copyList=mylist[:]
--------------------------------------------------------

Join Two Lists

1) + operator
list3=list1+list2

2)append all ele one by one

3) extend()
list1.extend(list2)
----------------------------------------------

List Methods

append()	Adds an element at the end of the list
clear()		Removes all the elements from the list
copy()		Returns a copy of the list
count()		Returns the number of elements with the specified value
extend()	Add the elements of a list (or any iterable), to the end of the current list
index()		Returns the index of the first element with the specified value
insert()	Adds an element at the specified position
pop()		Removes the element at the specified position
remove()	Removes the item with the specified value
reverse()	Reverses the order of the list
sort()		Sorts the list
-----------------------------------------------------------------------------------------------------------------------
===============================================================================================================================
***********************************************************************************************************************

Tuple

A tuple is a collection which is ordered and unchangeable.

Tuple items are ordered, unchangeable, and allow duplicate values.

Tuples are unchangeable, meaning that we cannot change, add or remove items after the tuple has been created.

Tuple items can be of any data type

A tuple can contain different data types



mytouple=("aaple", "banana", "cherry")
--------------------------------------------

Create Tuple With One Item:
mytouple=("apple",) #tuple
mytouple=("apple")  #string
--------------------------------------------------

Access Tuple items

1) using index:  mytuple[1]
2) negative index: mytuple[-1]
3)range of index: mytuple[2:5]
4) check if item exists:  "apple" in mytuple
------------------------------------------------------

Update tuple

1) add items
tuples are unchangeable or immutable
   i) convert into list
   ii) add tuple to a tuple - allowed to add tuples to tuples
   mytuple=mytuple + newtuple

2) remove items
   i) convert into list (workaround)

3) delete tuple
del mytuple
----------------------------------------------------

packing a tuple:
fruits=("apple","banana","cherry")

Unpacking a tuple
(green, yellow, red) = fruits

(green, *red)=fruits # red is list ["banana", "cherry"]
------------------------------------------------------

Loop tuples

1)for loop
2) using index number- range() and len()
3) while loop
-----------------------------------------------------------

Join tuples

1) + operator

2) multiply tuples (*) - add same items at the end n times

fruits=("a","b")
mytuple=fruits*2 #("a", "b", "a", "b")
------------------------------------------------------

tuple methods

count()		Returns the number of times a specified value occurs in a tuple
index()		Searches the tuple for a specified value and returns the position of where it was found
========================================================================================================
***********************************************************************************************
==========================================================================================================

Sets

myset = {"apple", "banana", "cherry"}

A set is a collection which is unordered, unchangeable*, unindexed and do not allow duplicate values.

* Note: Set items are unchangeable, but you can remove items and add new items.

(True and 1), (False and 0) is considered the same value in sets, and are treated as duplicates:

Set items can be of any data type

A set can contain different data types

Once a set is created, you cannot change its items, but you can add new items.
---------------------------------------------------

Access set items

1) for loop
2) "banana" in mySet # return true or false
3) "banana" not in mySet 
---------------------------------------------------

Add set items
1) add() - myset.add("orange")
2) update() - add items from another set into the current set.

The object in the update() method does not have to be a set, it can be any iterable object (tuples, lists, dictionaries etc.).

   myset.update(newSet)
   myset.update(mylist)
-----------------------------------------------------

Remove set item 

1) remove() -> myset.remove("banana")
	#if item not exist, error will raise

2) discard() -> myset.discard("banana")

	#if item not exist, error will not raise
3) pop() -> remove a random item

4) clear() -> empties the set

5) del myset  -> delete the set
----------------------------------------------------

Loop sets

1) for loop
----------------------------------------------------

Join sets

1) union()  -  joins all items from both sets. (join with list, tuples, set)
returns a new set with all items from both sets.
	myset=set1.union(set2)
	myset=set1.union(mylist)


 | operator- only join set with sets
	set3 = set1 | set2



2) update() -  joins all items from both sets.( join with list, tuples, set)
does not return a new set, changes the original set.
   set1.intersection(set2)

 
3) intersection()  - return new set that keeps ONLY the duplicates present in both sets.
   set3 = set1.intersection(set2)

& operator- same as intersection(). join only set with sets
   set3 = set1 & set2

intersection_update() - keeps ONLY the duplicates present in both sets.
does not return new set, update the original set
set1.intersection_update(set2)


4) difference()   - return a new set , keeps the items from the first set that are not in the other set(s).

- operator -> can use - operator instead of difference() method. allow for sets only
set3 = set1 - set2

difference_update() -> update the original set, not returning a new set
set1.difference_update(set2)



5) symmetric_difference()   - return new set that keep only the elements that are NOT present in both sets.
set3 = set1.symmetric_difference(set2)

^ operator -> similar to symmetric_difference(). allow for sets only
set3 = set1 ^ set2

symmetric_difference_update() -> update the original set.
set1.symmetric_difference_update(set2)

6) Join Multiple Sets
   All the joining methods and operators can be used to join multiple sets.
   myset = set1.union(set2, set3, set4)
   myset = set1 | set2 | set3 |set4
------------------------------------------------------

set Methods

add()	 			Adds an element to the set

clear()	 			Removes all the elements from the set

copy()	 			Returns a copy of the set

difference()		-	Returns a set containing the difference between two or more sets

difference_update()	-=	Removes the items in this set that are also included in another, specified set

discard()	 		Remove the specified item

intersection()		&	Returns a set, that is the intersection of two other sets

intersection_update()	&=	Removes the items in this set that are not present in other, specified set(s)

isdisjoint()	 		Returns whether two sets have a intersection or not

issubset()		<=	Returns whether another set contains this set or not

 			<	Returns whether all items in this set is present in other, specified set(s)

issuperset()		>=	Returns whether this set contains another set or not

 			>	Returns whether all items in other, specified set(s) is present in this set

pop()	 			Removes an element from the set

remove()	 		Removes the specified element

symmetric_difference()	^	Returns a set with the symmetric differences of two sets

symmetric_difference_update()	^=	Inserts the symmetric differences from this set and another

union()			|	Return a set containing the union of sets

update()		|=	Update the set with the union of this set and others
===========================================================================================================================================================
************************************************************************************************************************************************************============================================================================================================================================================

Dictionary

dict() constructor
key:value pairs.
ordered*, changeable and do not allow duplicates.

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
-----------------------------------------------------------------------------

Accessing Items




class Solution:
    def isPrime(num):
        for x in range(2, num ** 0.5+1):
            if num % x==0: return False
        return True

    def findNewNum(num, prevNum):
        for x in range(2,num):
            if(isPrime(x) and num-x > prevNum): return num-x
        return -1

    def primeSubOperation(self, nums: List[int]) -> bool:
        prevNum=0
        for i in range(len(nums)):
            num=nums[i]
            newNum=findNewNum(num,prevNum)
            if newNum==-1: return False
            nums[i]=newNum
            prevNum=newNum
        return True
        



























------------------------------------------------------------------

if.....Else

1) if 
if condition:
   statements

2)elif
if condition:
   statement
elif condition:
   statement

3) else

4) short hand (Ternary Operators or conditional expressions)
print("A") if a > b else print("B")

print("A") if a > b else print("=") if a == b else print("B")

5) if with no content use pass statement
if b > a:
  pass
-------------------------------------------------------------

while loop

1)syntax
while condition:
   statements

2) while with else -> else statement will get executed once when condition is false
while condition:
   statements
else:
   statements
-----------------------------------------------------

For loop

1)syntax 
for x in mylist:
   statements

2) using range

i) range(n) -> x in [0,n-1] and increase by 1
for x in range(n):
   statements

ii)) x in [a,b-1] and increase by 1
for x in range (a,b):
   statements

iii) x in [a,b-1] and increase by c
for x in range(a,b,c):
   statements

3) else in for loop
specifies a block of code to be executed when the loop is finished
**Note: The else block will NOT be executed if the loop is stopped by a break statement.

for x in range(n):
   statements
else:
   statements

4) pass statement -> no error for empty for loop
for x in range(n):
   pass
-------------------------------------------------------

Functions

syntax:
def my_function():	#define func
   statements

my_function()		#calling func

1) Arbitrary Arguments, *args
If the number of arguments is unknown, add a * before the parameter name:
def my_function(*kids): #function will receive a tuple of arguments
  print("The youngest child is " + kids[2])

my_function("Emil", "Tobias", "Linus")

2) Keyword Arguments
You can also send arguments with the key = value syntax.

This way the order of the arguments does not matter.
def my_function(child3, child2, child1):
  print("The youngest child is " + child3)

my_function(child1 = "Emil", child2 = "Tobias", child3 = "Linus")

3) Arbitrary Keyword Arguments, **kwargs
If you do not know how many keyword arguments that will be passed into your function, add two asterisk: ** before the parameter name in the function definition.

This way the function will receive a dictionary of arguments, and can access the items accordingly:

def my_function(**kid):
  print("His last name is " + kid["lname"])

my_function(fname = "Tobias", lname = "Refsnes")


4) Default Parameter Value
If we call the function without argument, it uses the default value:
def my_function(country = "Norway"):
  print("I am from " + country)

my_function("India")
my_function()

5) Return value
def my_function(x):
  return 5 * x

6) pass statement -> empty function
def myfunction():
  pass

7) Positional-Only Arguments -> add ,/ after the arguments
def my_function(x, /):
  print(x)
my_function(3)

8) Keyword-Only Arguments -> add *, before the arguments
def my_function(*, x):
  print(x)
my_function(x = 3)

9) Combine Positional-Only and Keyword-Only
You can combine the two argument types in the same function.

Any argument before the / , are positional-only, and any argument after the *, are keyword-only.

def my_function(a, b, /, *, c, d):
  print(a + b + c + d)

my_function(5, 6, c = 7, d = 8)
-----------------------------------------------------------------------------------------------------













